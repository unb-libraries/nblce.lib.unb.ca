<?php

/**
 * @file
 * Contains nblce_core.module.
 */

use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implements hook_help().
 */
function nblce_core_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the nblce_core module.
    case 'help.page.nblce_core':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides core functionality for the NBLCE site.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function nblce_core_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  $messenger = \Drupal::messenger();
  $messenger->addMessage(
    t('UNB/STU patrons with accounts should use the <strong>@auth_link</strong>.',
      [
        '@auth_link' => Link::fromTextAndUrl(
          t('Secure Services Login'),
          Url::fromUri('base:/saml/login')
        )->toString(),
      ]
    ),
    $messenger::TYPE_WARNING
  );

  array_push($form['#validate'], '_nblce_core_validate_final');


}

/**
 * Implements hook_node_presave().
 */
function nblce_core_node_presave ($node) {
    // Trim leading/trailing whitespace from title input.
    $title_field = $node
        ->get('title')
        ->getString();
    $title = $title_field ? trim($title_field) : 'Undefined!';
    if ($title != $title_field) {
        $node->setTitle($title_field);
    }

    switch ($node->getType()) {
        case 'author_page':
            // Set listing title and section field defaults, if applicable.
            if ($node->hasField('field_sort_name')) {
                $listing_title = trim($node->get('field_sort_name')->getString());
                $listing_title = (empty($listing_title)) ? $title_field : $listing_title;
            }
            else {
                $listing_title = NULL;
            }

            if (empty($node->get('field_sort_name')->getValue())) {
                $names = explode(' ', $listing_title);
                if ($names[0] === 'The') {
                    $first_names = ', ' . array_shift($names);
                    $last_name = (!empty($names)) ? implode(' ', $names) : NULL;
                }
                else {
                    $last_name = array_pop($names);
                    $first_names = (!empty($names)) ? ', ' . implode(' ', $names) : NULL;
                }
                $listing_title = $last_name . $first_names;
                $node->set('field_sort_name', $listing_title);
            }
            break;
    }
}

/**
 * Implements hook_page_attachments().
 */
function nblce_core_page_attachments(array &$attachments) {
  if (!\Drupal::currentUser()->hasPermission('access toolbar')) {
    return;
  }

  $attachments['#attached']['library'][] = 'nblce_core/toolbar-overrides';
}

/**
 * Form validation callback.
 *
 * Alter text of error messages, removing request/reset password url references.
 * Based from https://www.drupal.org/sandbox/ekes/emaillogin.
 *
 * @see nblce_core_form_user_login_form_alter()
 */
function _nblce_core_validate_final(array &$form, FormStateInterface $form_state) {
  $changed = FALSE;
  if (($errors = $form_state->getErrors()) && !empty($errors['name']) && $errors['name'] instanceof TranslatableMarkup) {
    $error = $errors['name']->getUntranslatedString();
    if ($error == 'Unrecognized username or password. <a href=":password">Forgot your password?</a>') {
      $errors['name'] = t(
        'Unrecognized username or password. Please try again.',
        $errors['name']->getArguments()
      );
      $changed = TRUE;
    }
    elseif (strpos($error, 'failed login attempts for this account. It is temporarily blocked') !== false) {
      $errors['name'] = t('There have been more than 5 failed login attempts for this account and
        it is temporarily blocked. Please try again later.');
      $changed = TRUE;
    }
  }
  if ($changed) {
    // It's clear and reset or set the protected variable by name with
    // FormState::setFormState().
    $form_state->clearErrors();
    foreach ($errors as $name => $error) {
      $form_state->setErrorByName($name, $error);
    }
  }

}
